{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Feature","title","description","icon","className","height","Link","props","Emphasize","children","Step","number","label","image","alt","src","Label","color","size","FrequentlyAskedQuestion","question","answer","First","style","margin","Second","Third","faWrench","faBacon","faAtom","faFireAlt","maxHeight","App","backgroundColor","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAWMA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,KAAvB,OACd,yBAAKC,UAAU,mCACb,yBAAKA,UAAU,kDACb,kBAAC,IAAD,CAAiBC,OAAQ,GAAIF,KAAMA,KAErC,6BACE,wBAAIC,UAAU,8BAA8BH,GAC5C,uBAAGG,UAAU,yBAAyBF,MAKtCI,EAAO,SAAAC,GAAK,OAChB,wCAAMH,UAAU,yCAA4CG,KAGxDC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUL,EAAb,EAAaA,UAAb,OAChB,0BAAMA,UAAS,wCAAmCA,IAC/CK,IAICC,EAAO,SAAC,GAAD,EAAGC,OAAH,IAAWC,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,MAAlB,OACX,yBAAKT,UAAU,gEACb,yBAAKA,UAAU,sDACZQ,GAGH,yBACEE,IAAI,GACJV,UAAU,uDACVW,IAAKF,MAKLG,EAAQ,SAAC,GAAD,IAAGP,EAAH,EAAGA,SAAUQ,EAAb,EAAaA,MAAb,IAAoBC,YAApB,MAA2B,KAA3B,SACZ,0BACEd,UAAS,aAAQa,EAAR,gEAAqEC,EAArE,kBAERT,IAICU,EAA0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAb,OAC9B,yBAAKjB,UAAU,6CACb,wBAAIA,UAAU,2CAA2CgB,GACzD,uBAAGhB,UAAU,0CAA0CiB,KAIrDC,EAAQ,kBACZ,yBACElB,UAAU,6FACVmB,MAAO,CAAEC,QAAS,KAElB,wBAAIpB,UAAU,iCAAd,QAEA,uBAAGA,UAAU,uCAAb,uCACuC,IACrC,0BAAMA,UAAU,iCAAhB,0BAKAqB,EAAS,kBACb,yBAAKrB,UAAU,+EACb,wBAAIA,UAAU,sDAAd,iFAKA,uBAAGA,UAAU,oCACX,kBAAC,EAAD,aADF,kEAEkB,kBAAC,EAAD,CAAOa,MAAM,UAAb,SAFlB,kEAG2C,IACzC,0BAAMb,UAAU,8BAAhB,kBAJF,wEAUEsB,EAAQ,kBACZ,yBAAKtB,UAAU,kEACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEH,MAAM,qBACNE,KAAMwB,IACNzB,YACE,iHAEgB,kBAAC,EAAD,aAFhB,iCAOJ,kBAAC,EAAD,CACED,MAAM,uBACNE,KAAMyB,IACN1B,YAAY,yIAKd,kBAAC,EAAD,CACED,MAAM,mBACNE,KAAM0B,IACN3B,YAAY,+FAId,kBAAC,EAAD,CACED,MAAM,0BACNE,KAAM2B,IACN5B,YAAY,iJAIhB,yBAAKE,UAAU,8BACb,yBACEW,IAAI,wBACJD,IAAI,oBACJV,UAAU,kDACVmB,MAAO,CAAEQ,UAAW,UAmNbC,MA7Mf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOC,gBAAgB,SACrB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,gBAAgB,SACrB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,gBAAgB,SACrB,yBAAK7B,UAAU,uCACb,wBAAIA,UAAU,0DAAd,qCAIA,kBAAC,EAAD,CAAWA,UAAU,4CAArB,4BAMJ,kBAAC,IAAD,CAAO6B,gBAAgB,SACrB,kBAAC,EAAD,CAAMtB,OAAQ,EAAGC,MAAM,sBAAsBC,MAAM,iBAGrD,kBAAC,IAAD,CAAOoB,gBAAgB,SACrB,kBAAC,EAAD,CACEtB,OAAQ,EACRE,MAAM,gBACND,MACE,4CACQ,IACN,kBAAC,EAAD,CAAOK,MAAM,OAAOC,KAAK,MAAzB,aAQR,kBAAC,IAAD,CAAOe,gBAAgB,SACrB,kBAAC,EAAD,CAAMtB,OAAQ,EAAGC,MAAM,wBAAwBC,MAAM,eAGvD,kBAAC,IAAD,CAAOoB,gBAAgB,SACrB,kBAAC,EAAD,CACEtB,OAAQ,EACRE,MAAM,cACND,MAAM,sEAIV,kBAAC,IAAD,CAAOqB,gBAAgB,SACrB,kBAAC,EAAD,CACEb,SACE,4DACwB,IACtB,0BAAMhB,UAAU,yBAAhB,SAFF,mBAMFiB,OACE,oCACE,kBAAC,EAAD,CAAMa,KAAK,2CAAX,QAAiE,IADnE,6DAE6D,IAC3D,kBAAC,EAAD,aAHF,6BAGwD,IACtD,0BAAM9B,UAAU,8BAAhB,oBAJF,sBAOqB,kBAAC,EAAD,CAAOa,MAAM,UAAb,gBAA2C,IAPhE,uBAQsB,kBAAC,EAAD,aARtB,2BASS,kBAAC,EAAD,CAAOA,MAAM,QAAb,WATT,cAeN,kBAAC,IAAD,CAAOgB,gBAAgB,SACrB,kBAAC,EAAD,CACEb,SACE,mEAC8B,kBAAC,EAAD,aAD9B,sCAKFC,OACE,+CACU,kBAAC,EAAD,aADV,kBACqD,IACnD,kBAAC,EAAD,CAAMa,KAAK,oDAAX,sBAFF,8CAK8C,IAC5C,0BAAM9B,UAAU,8BAAhB,mBAEQ,IARV,2BAeN,kBAAC,IAAD,CAAO6B,gBAAgB,SACrB,yBAAK7B,UAAU,2CACb,yBACEA,UAAU,oBACVmB,MAAO,CAAElB,OAAQ,KACjBU,IAAI,YACJD,IAAI,kCAKV,kBAAC,IAAD,CAAOmB,gBAAgB,SACrB,kBAAC,EAAD,CACEb,SACE,4CACO,kBAAC,EAAD,aADP,yCAKFC,OACE,oCACE,uBAAGjB,UAAU,QAAb,QACO,kBAAC,EAAD,aADP,oCAIA,uBAAGA,UAAU,QAAb,6BAC6B,IAC3B,kBAAC,EAAD,CAAM8B,KAAK,6DAAX,WAKF,uBAAG9B,UAAU,QAAb,iEACiE,IAC/D,kBAAC,EAAD,CAAM8B,KAAK,2DAAX,SAKF,uBAAG9B,UAAU,QAAb,uCACsC,kBAAC,EAAD,aAA4B,IADlE,sCAEsC,IACpC,kBAAC,EAAD,CAAM8B,KAAK,yFAAX,sBAHF,KASA,oGAEW,IACT,kBAAC,EAAD,CAAMA,KAAK,6DAAX,UAHF,gGAcR,kBAAC,IAAD,CAAOD,gBAAgB,SACrB,yBAAK7B,UAAU,uCACb,wBAAIA,UAAU,kDAAd,uCACuC,IACrC,kBAAC,EAAD,CAAWA,UAAU,SAArB,2BAEF,yBAAKA,UAAU,sCAAf,SACQ,kBAAC,EAAD,uCADR,kCAMJ,kBAAC,IAAD,CAAO6B,gBAAgB,SACrB,yBAAK7B,UAAU,uCACb,kBAAC,EAAD,CAAWA,UAAU,4CAArB,uBAMJ,kBAAC,IAAD,CAAO6B,gBAAgB,SACrB,yBAAK7B,UAAU,oDACb,kBAAC,EAAD,CAAWA,UAAU,iDAArB,uCAGA,yBACEA,UAAU,oBACVW,IAAI,oBACJD,IAAI,oCCrUIqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8dedb650.chunk.js","sourcesContent":["import React from \"react\";\nimport { Deck, Slide } from \"spectacle\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faFireAlt,\n  faWrench,\n  faAtom,\n  faBacon\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Feature = ({ title, description, icon }) => (\n  <div className=\"mb-8 flex items-start last:mb-0\">\n    <div className=\"rounded bg-yellow-500 p-3 text-yellow-100 mr-5\">\n      <FontAwesomeIcon height={24} icon={icon} />\n    </div>\n    <div>\n      <h3 className=\"text-xl font-semibold mb-2\">{title}</h3>\n      <p className=\"text-lg text-gray-700\">{description}</p>\n    </div>\n  </div>\n);\n\nconst Link = props => (\n  <span className=\"text-blue-600 font-semibold underline\" {...props} />\n);\n\nconst Emphasize = ({ children, className }) => (\n  <span className={`text-purple-500 font-semibold ${className}`}>\n    {children}\n  </span>\n);\n\nconst Step = ({ number, label, image }) => (\n  <div className=\"flex items-center justify-center flex-col mb-8 w-full h-full\">\n    <div className=\"pr-4 mb-6 text-5xl text-gray-900 mx-20 text-center\">\n      {label}\n    </div>\n\n    <img\n      alt=\"\"\n      className=\"max-w-4xl border-2 border-gray-300 rounded-lg h-auto\"\n      src={image}\n    />\n  </div>\n);\n\nconst Label = ({ children, color, size = \"xl\" }) => (\n  <span\n    className={`bg-${color}-600 text-white px-2 py-1 rounded font-semibold text-${size} align-middle`}\n  >\n    {children}\n  </span>\n);\n\nconst FrequentlyAskedQuestion = ({ question, answer }) => (\n  <div className=\"mx-20 h-full flex flex-col justify-center\">\n    <h4 className=\"font-normal text-6xl mb-6 text-gray-700\">{question}</h4>\n    <p className=\"text-grey-800 text-3xl leading-relaxed\">{answer}</p>\n  </div>\n);\n\nconst First = () => (\n  <div\n    className=\"bg-purple-600 w-full h-full flex justify-center flex-col items-center text-center absolute\"\n    style={{ margin: -32 }}\n  >\n    <h1 className=\"text-6xl font-bold text-white\">auto</h1>\n\n    <p className=\"text-2xl text-purple-200 font-light\">\n      Streamline your release workflow and{\" \"}\n      <span className=\"text-yellow-500 font-semibold\">publish constantly!</span>\n    </p>\n  </div>\n);\n\nconst Second = () => (\n  <div className=\"mt-10 lg:mb-24 text-center flex items-center justify-center flex-col h-full\">\n    <h2 className=\"text-purple-900 text-4xl mb-12 mx-32 font-semibold\">\n      Adding automated releases shouldn't be hard or require changing your\n      workflow\n    </h2>\n\n    <p className=\"max-w-2xl text-2xl text-gray-700\">\n      <Emphasize>auto</Emphasize> makes automating releases for your project as\n      simple adding a <Label color=\"yellow\">label</Label> to a pull request. If\n      you're releasing all the time you can be{\" \"}\n      <span className=\"text-red-500 font-semibold\">more confident</span> in your\n      releases. And your users might thank you too ðŸ˜‰\n    </p>\n  </div>\n);\n\nconst Third = () => (\n  <div className=\"h-full flex justify-around items-center flex-row text-gray-900\">\n    <div className=\"flex-1 lg:px-12\">\n      <Feature\n        title=\"Keep Your Workflow\"\n        icon={faWrench}\n        description={\n          <p>\n            Other tools require you to change how any contributor commits to you\n            project. With <Emphasize>auto</Emphasize> leave that baggage behind!\n          </p>\n        }\n      />\n\n      <Feature\n        title=\"Beautiful Changelogs\"\n        icon={faBacon}\n        description=\"Link to PRs and Jira stories, include authors, monorepo aware,\n      customizable labels section, additional release notes, and even\n      more!\"\n      />\n\n      <Feature\n        title=\"Atomic Functions\"\n        icon={faAtom}\n        description=\"Each command does one thing and they do it well. Easily use\n    them to fit any build process.\"\n      />\n\n      <Feature\n        title=\"Blazingly Fast Releases\"\n        icon={faFireAlt}\n        description=\"Since all you need to worry about are labels you can work at an incredibly fast pace! This speed to commit also helps with new contributors\"\n      />\n    </div>\n\n    <div className=\"flex-1 px-12 mb-20 lg:mb-0\">\n      <img\n        src=\"changelog-example.png\"\n        alt=\"Changelog example\"\n        className=\"border border-grey-600 rounded-lg p-4 shadow-md\"\n        style={{ maxHeight: 500 }}\n      />\n    </div>\n  </div>\n);\n\nfunction App() {\n  return (\n    <Deck>\n      <Slide>\n        <First />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Second />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Third />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <div className=\"h-full flex flex-col justify-center\">\n          <h2 className=\"text-center text-5xl text-gray-900 mx-20 font-semibold\">\n            What does the workflow look like?\n          </h2>\n\n          <Emphasize className=\"text-center text-6xl text-gray-900 mx-20\">\n            How easy is it really?\n          </Emphasize>\n        </div>\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step number={1} label=\"Open a Pull Request\" image=\"open-pr.png\" />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step\n          number={2}\n          image=\"add-label.png\"\n          label={\n            <>\n              Add a{\" \"}\n              <Label color=\"blue\" size=\"xl\">\n                label\n              </Label>\n            </>\n          }\n        />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step number={3} label=\"Hit that merge button\" image=\"merge.png\" />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <Step\n          number={4}\n          image=\"release.png\"\n          label=\"Wait for you continuous integration to make the release for you!\"\n        />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <FrequentlyAskedQuestion\n          question={\n            <>\n              Do you really release{\" \"}\n              <span className=\"font-extrabold italic\">every</span> pull\n              request?!\n            </>\n          }\n          answer={\n            <>\n              <Link href=\"https://github.com/intuit/auto/releases\">Yup!</Link>{\" \"}\n              But if you don't want to do that it's up to you. The tools{\" \"}\n              <Emphasize>auto</Emphasize> ships with can be used to{\" \"}\n              <span className=\"font-semibold text-red-600\">\n                fit any workflow\n              </span>\n              ! You can also use <Label color=\"purple\">skip-release</Label>{\" \"}\n              labels or configure <Emphasize>auto</Emphasize> to only release\n              with a <Label color=\"blue\">release</Label> label.\n            </>\n          }\n        />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <FrequentlyAskedQuestion\n          question={\n            <>\n              Is there a way to hook into <Emphasize>auto</Emphasize> and\n              customize my release process?\n            </>\n          }\n          answer={\n            <>\n              Many of <Emphasize>auto</Emphasize>'s features are{\" \"}\n              <Link href=\"https://intuit.github.io/auto/pages/plugins.html\">\n                built into plugins\n              </Link>\n              . You can also use this plugin system to do{\" \"}\n              <span className=\"font-semibold text-red-600\">\n                almost anything\n              </span>{\" \"}\n              during your release!\n            </>\n          }\n        />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <div className=\"h-full flex justify-center items-center\">\n          <img\n            className=\"max-h-full w-auto\"\n            style={{ height: 600 }}\n            src=\"logos.png\"\n            alt=\"Supported package platforms\"\n          />\n        </div>\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <FrequentlyAskedQuestion\n          question={\n            <>\n              Does <Emphasize>auto</Emphasize> support any other types of\n              releases?\n            </>\n          }\n          answer={\n            <>\n              <p className=\"mb-3\">\n                Yes! <Emphasize>auto</Emphasize> has commands for any situation!\n              </p>\n\n              <p className=\"mb-2\">\n                Want a test version? Try a{\" \"}\n                <Link href=\"https://intuit.github.io/auto/pages/generated/canary.html\">\n                  canary\n                </Link>\n              </p>\n\n              <p className=\"mb-2\">\n                Want a prerelease? Try creating a pre-release branch and using{\" \"}\n                <Link href=\"https://intuit.github.io/auto/pages/generated/next.html\">\n                  next\n                </Link>\n              </p>\n\n              <p className=\"mb-2\">\n                Need to patch an old major release? <Emphasize>auto</Emphasize>{\" \"}\n                can automatically make branches for{\" \"}\n                <Link href=\"https://intuit.github.io/auto/pages/generated/shipit.html#managing-old-major-versions\">\n                  old major versions\n                </Link>\n                !\n              </p>\n\n              <p>\n                Or if you don't want to worry about what command to you need,\n                just use{\" \"}\n                <Link href=\"https://intuit.github.io/auto/pages/generated/shipit.html\">\n                  shipit\n                </Link>\n                ! This command determines what type of release to make based on\n                the context it's run in.\n              </p>\n            </>\n          }\n        />\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <div className=\"h-full flex flex-col justify-center\">\n          <h3 className=\"text-center text-6xl text-gray-900 mx-20 mb-10\">\n            Stop worrying about your release and{\" \"}\n            <Emphasize className=\"block\">hit that merge button!</Emphasize>\n          </h3>\n          <div className=\"text-gray-800 text-3xl text-center\">\n            Visit <Link>https://github.com/intuit/auto</Link> to get started ðŸŽ‰\n          </div>\n        </div>\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <div className=\"h-full flex flex-col justify-center\">\n          <Emphasize className=\"text-center text-6xl text-gray-900 mx-20\">\n            One more thing...\n          </Emphasize>\n        </div>\n      </Slide>\n\n      <Slide backgroundColor=\"white\">\n        <div className=\"h-full flex justify-center items-center flex-col\">\n          <Emphasize className=\"text-center text-6xl text-gray-900 mx-20 mb-8\">\n            Hand-craft release notes for any PR\n          </Emphasize>\n          <img\n            className=\"max-h-full w-auto\"\n            src=\"release-notes.png\"\n            alt=\"Supported package platforms\"\n          />\n        </div>\n      </Slide>\n    </Deck>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}